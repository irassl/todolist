{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","StatusCode","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","setInitialized","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isLogginIn","auth","isLoggedIn","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","OK","err","finally","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","FormControlLabel","control","name","handleChange","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dacad111.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '524e0318-1cf6-4d4c-b0a7-084d6b518c22'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI={\r\n    login(data:LoginParamsType){\r\n        return instance.post<LoginParamsType,AxiosResponse<ResponseType<{userId:number}>>>('/auth/login',data);\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<MeType>>(`/auth/me`);\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType<MeType>>(`/auth/login`);\r\n    }\r\n}\r\nexport type MeType ={\r\n    id:number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport type LoginParamsType ={\r\n    email:string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?:string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum StatusCode {\r\n    OK = 0,\r\n    ERROR,\r\n    CAPTCHA = 10,\r\n\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI, StatusCode} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setInitialized = (isInitialized:boolean)=>({type: 'APP/INITIALIZED', isInitialized} as const)\r\n\r\n\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setInitializedType = ReturnType<typeof setInitialized>\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setInitializedType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const isLogginIn = useSelector<AppRootStateType,boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLogginIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLogginIn){\r\n       return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import { Dispatch } from 'redux'\nimport {\n    SetAppErrorActionType,\n    setAppStatusAC,\n    SetAppStatusActionType,\n    setInitialized,\n    setInitializedType\n} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType, StatusCode} from \"../../api/todolists-api\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data)\n        .then((res)=>{\n            if(res.data.resultCode=== StatusCode.OK){\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data,dispatch)\n            }\n        }).catch((err:AxiosError)=>{\n            handleServerNetworkError(err,dispatch)\n    }).finally(()=>{\n        dispatch(setAppStatusAC('idle'))\n    })\n}\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n\n        if (res.data.resultCode === StatusCode.OK) {\n            dispatch(setIsLoggedInAC(true));\n            dispatch(setInitialized(true))\n        } else {\n            handleServerAppError(res.data,dispatch)\n        }\n    }).catch((e:AxiosError)=>{\n        handleServerNetworkError(e,dispatch)\n    })\n        .finally(()=>{\n            dispatch(setInitialized(true))\n        })\n}\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType | setInitializedType\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n    const isLogginIn = useSelector<AppRootStateType,boolean>((state) => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if(!values.password){\n                errors.password= 'Required'\n            }else if ( values.password.length < 3 ){\n                errors.password = \"bad Password\"\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n    if(isLogginIn){\n       return <Navigate to={'/'}/>\n    }\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <FormGroup>\n                    <TextField label=\"Email\" margin=\"normal\"\n                        {...formik.getFieldProps('email')}\n                    onBlur={formik.handleBlur}/>\n                    { formik.errors.email ? <div style={{color:'red'}}> {formik.errors.email}</div>: null}\n                    <TextField type=\"password\" label=\"Password\"\n                               margin=\"normal\" {...formik.getFieldProps('password')}\n                               onBlur={formik.handleBlur}/>\n\n                    { formik.errors.password ? <div style={{color:'red'}}> {formik.errors.password}</div>: null}\n                    <FormControlLabel label={'Remember me'} control={<Checkbox name={'rememberMe'}/>}\n                    onChange={formik.handleChange}\n                    value={formik.values.rememberMe}/>\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\n                        Login\n                    </Button>\n                </FormGroup>\n            </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Routes, Route, Navigate} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {initializeAppTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType,boolean>((state)=>state.app.isInitialized)\r\n    const isLoginIn = useSelector<AppRootStateType,boolean>((state)=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n    if (!isInitialized) {\r\n       return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n       </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList demo={demo}/> }/>\r\n                    <Route path={'login'} element={<Login /> }/>\r\n                    <Route path={\"/404\"} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}